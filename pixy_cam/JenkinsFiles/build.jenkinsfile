@Library( "X13JenkinsLib" )_

void DoDockerBuild()
{
    stages
    {
        stage( 'clean' )
        {
            steps
            {
                cleanWs();
            }
        }
        stage( 'checkout' )
        {
            steps
            {
                checkout scm;
            }
        }
        stage( 'In Docker' )
        {
            agent
            {
                dockerfile
                {
                    filename 'ubuntu_build_env.dockerfile'
                    dir 'checkout/pixy_cam/Docker'
                    label 'PixyCamBuildEnv'
                    args "-e HOME='${env.WORKSPACE}'"
                    reuseNode true
                }
            }
            stages
            {
                stage( 'build deb' )
                {
                    steps
                    {
                        sh 'cd ./checkout/pixy_cam && scons debian_build';
                    }
                }
            }
        }
        stage( 'Archive Artifacts' )
        {
            steps
            {
                archiveArtifacts 'pixy_cam/install/deb/bin/*.deb';
            }
        }
    }
}

void CleanupDockerImage()
{
    def imageId = sh(script: "docker images -q PixyCamBuildEnv", returnStdout: true).trim();
    if( imageId )
    {
        sh "docker rmi -f ${imageId}";
    }
}

pipeline
{
    agent none
    options
    {
        skipDefaultCheckout( true );
    }
    stages
    {
        stage( "Build" )
        {
            parallel
            {
                stage( "Linux x64" )
                {
                    agent
                    {
                        label "linux && x64 && docker";
                    }
                    stages
                    {
                        stage( "Common Docker Build" )
                        {
                            steps
                            {
                                DoDockerBuild();
                            }
                        }
                    }
                    post
                    {
                        always
                        {
                            script
                            {
                                CleanupDockerImage();
                            }
                        }
                    }
                }

                stage( "Linux arm64" )
                {
                    agent
                    {
                        label "linux && arm64 && docker";
                    }
                    stages
                    {
                        stage( "Common Docker Build" )
                        {
                            steps
                            {
                                DoDockerBuild();
                            }
                        }
                    }
                    post
                    {
                        always
                        {
                            script
                            {
                                CleanupDockerImage();
                            }
                        }
                    }
                }
            }
        }
    }
}